{"version":3,"sources":["rac1.js","App.js","serviceWorker.js","index.js"],"names":["handleFetchErrors","response","ok","Error","statusText","catchFetchErrors","error","console","dataAttrsFind","dataAttrsClean","Rac1","props","Object","classCallCheck","this","_podcastsData","_pages_uuids","_previous_uuids","date","onListUpdate","updateList","pageNumber","arguments","length","undefined","getPodcastsUUIDs","then","getPodcasts","bind","handleListUpdate","podcasts","_this","map","podcast","uuid","getPodcastData","handlePodcastUpdate","_this2","newList","toConsumableArray","completed","pages","forEach","page","pageUuids","push","filter","podcastPage","allCompleted","every","podcastNew","_this3","index","_this4","getPage","dataRaw","_this4$parsePage","parsePage","uuidsPage","reverse","pad2","num","getDate","getMonth","getFullYear","fetch","concat","credentials","text","catch","searchData","data","match","v","replace","split","includes","Number","_this5","Promise","resolve","json","audio","hour","time","App","possibleConstructorReturn","getPrototypeOf","call","state","currentUUID","Date","volume","waitingUpdate","controls","icon","action","playPrev","react_default","a","createElement","style","letterSpacing","paddingRight","player","currentTime","paused","play","pause","playNext","test","navigator","userAgent","keyHandlerFocus","_keyHandler","focus","rac1","setState","objectSpread","_this$state","current","findCurrentPodcast","autoplay","currentPath","path","className","title","name","width","height","border","margin","padding","position","ref","element","onKeyUp","handleKey","onBlur","control","key","onClick","borderRadius","fontSize","fontWeight","Function","color","bundle_default","_player","src","autoPlay","preload","onEnded","backgroundColor","textAlign","handleClickReload","disabled","top","right","marginBottom","listStyleType","marginLeft","paddingLeft","left","href","handleClickPodcast","textDecoration","waitingUpdateNext","found","findPodcastByUUID","playPodcast","retry","audioEl","e","stopPropagation","preventDefault","increment","volumeNew","setVolume","shiftKey","incrementVolume","muted","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2174ce5.chunk.js","sourcesContent":["// Raises exception on response error\nfunction handleFetchErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n  return response;\n}\n\n// Catches the fetch error, original or 'self-raised'\nfunction catchFetchErrors(error) {\n  console.error(error);\n}\n\n// Cached/compiled regexps for parsing HTML\nconst dataAttrsFind  = /.*\"(audioteca-item|pagination-link)\" (data-[^=]*)=\"([^\"]*)\"[ \\t>]/g;\nconst dataAttrsClean = /^.*[ \\t](data-[^=]*)=\"([^\"]*)\"[ \\t>].*$/;\n\nclass Rac1 {\n\n  // Cache for UUID => podcast\n  _podcastsData = {};\n\n  // Cache for pageNumber => UUIDs\n  _pages_uuids = [];\n\n  // Cache for reloads\n  _previous_uuids = [];\n\n  constructor(props) {\n    const noop = () => {};\n    this.date = props.date;\n    this.onListUpdate = props.onListUpdate || noop;\n\n    this.updateList();\n  }\n\n  setDate(date) {\n    this.date = date;\n    this._previous_uuids = [];\n  }\n\n  // Download podcasts UUIDs and then, each podcast data\n  updateList(pageNumber=0) {\n    if(pageNumber === 0) {\n      this._pages_uuids = [];\n    }\n\n    // Get list of UUIDs\n    return this.getPodcastsUUIDs(pageNumber)\n      // Download podcast data if needed\n      .then(this.getPodcasts.bind(this, pageNumber))\n      // Trigger event for list updated\n      .then(this.handleListUpdate.bind(this, pageNumber));\n  }\n\n  getPodcasts(pageNumber, podcasts) {\n    return podcasts\n      .map(podcast => {\n        // If it's a podcast and is not in the cache\n        if(podcast.uuid !== '...' && !(podcast.uuid in this._podcastsData)) {\n          // Download podcast data and then trigger\n          // event when updated\n          this.getPodcastData(podcast.uuid)\n            .then( this.handlePodcastUpdate.bind(this, pageNumber) )\n        }\n        return podcast;\n      })\n  }\n\n  // Creates a list with all known podcast or UUIDs\n  // and fires event onListUpdate with that\n  // () => null\n  handleListUpdate() {\n    let newList = [...this._previous_uuids];\n    let completed = true;\n\n    // Create a virtual list of all podcasts correctly ordered\n    this.pages.forEach( page => {\n\n      // Get UUIDs from the pages cache\n      var pageUuids = this._pages_uuids[ page ];\n\n      // Set temporal UUID for unresolved pages\n      if(pageUuids === undefined) {\n        newList.push({uuid: '...'});\n        completed = false;\n      }\n      else {\n        // Add this page's podcasts to the list\n        pageUuids\n          // filter out already added podcasts\n          .filter( podcastPage => {\n            const found = newList.filter(\n              podcast => podcast.uuid === podcastPage.uuid );\n            return found.length === 0;\n          })\n          .forEach( podcast => newList.push( podcast ) );\n      }\n    });\n\n    // Get cached data if available\n    newList = newList.map(podcast => this._podcastsData[podcast.uuid] || podcast );\n\n    // Save complete list on finish\n    if(completed) {\n      this._previous_uuids = newList;\n    }\n\n    // See if all podcasts have already been downloaded\n    const allCompleted = completed && newList.every(podcast => 'path' in podcast);\n\n    // Trigger update event\n    this.onListUpdate(newList, allCompleted);\n\n    return newList;\n  }\n\n  // Saves the new podcast to the pages cache and fires onPodcastUpdate\n  // (pageNumber, podcastNew) => null\n  handlePodcastUpdate(pageNumber, podcastNew) {\n    podcastNew.page = pageNumber;\n    this._pages_uuids[pageNumber].forEach((podcast,index) => {\n      if(podcast.uuid === podcastNew.uuid) {\n        this._pages_uuids[pageNumber][index] = podcastNew;\n      }\n    });\n\n    // Trigger update event\n    this.handleListUpdate(podcastNew);\n  }\n\n  // Gets all the podcasts UUIDs of a date\n  // (pageNumber) => Promise(Array(String(UUID)))\n  getPodcastsUUIDs(pageNumber=0) {\n    return this.getPage(pageNumber)\n      .then(dataRaw => {\n\n        //console.log({pageNumber, dataRaw});\n        const { uuidsPage, pages } = this.parsePage(dataRaw);\n\n        // If it's the first page, call the rest\n        if(pageNumber === 0) {\n\n          // Save the list of pages, in reverse order\n          // If there are no pages (only one page), create a one element array,\n          // with page zero in it's first element\n          this.pages = pages.length > 0 ? pages.reverse() : [0];\n\n          // Resolve first the last page, so we have first the first day's UUIDs\n          // Don't call again first page\n          this.pages.forEach( page => (page !== 0) && this.updateList( page ) );\n        }\n\n        this._pages_uuids[pageNumber] = uuidsPage\n          .reverse()\n          .map(uuid => { return {uuid, page: pageNumber} });\n\n        return this._pages_uuids[pageNumber];\n      });\n  }\n\n  // Gets a page with HTML containning a list of podcasts from the server\n  // (pageNumber) => Promise(String)\n  getPage(pageNumber=0) {\n    // Format day and month to 2 digits 0 padded strings\n    const pad2 = num => ( num < 10 ? '0' : '' ) + num;\n    const date =\n      pad2( this.date.getDate() ) + '/' +\n      pad2( 1 + this.date.getMonth() ) + '/' +\n      this.date.getFullYear();\n\n    return fetch(\n      \"https://cors-anywhere.herokuapp.com/\" // Anti CORS\n      //+ \"https://www.rac1.cat/a-la-carta/cerca?\"\n      + \"https://api.audioteca.rac1.cat/a-la-carta/cerca?\"\n      + `text=&programId=&sectionId=HOUR&from=${date}&to=${date}&pageNumber=${pageNumber}`,\n      {\n        //mode: 'no-cors',\n        credentials: 'omit',\n      })\n      .then(handleFetchErrors)\n      .then(response => response.text())\n      .catch(catchFetchErrors)\n  }\n\n  // Parses a page raw HTML to obtain audio UUIDs and the list of pages\n  // (dataRawHTML) => {uuidsPage: Array(String), pages: Array(Number)}\n  parsePage(dataRaw) {\n    const searchData = ['data-audio-id','data-audioteca-search-page'];\n    const data = dataRaw\n      .match(dataAttrsFind)\n      .map(v => v.replace(dataAttrsClean, '$1=$2').split('='))\n      .filter(v => searchData.includes(v[0]));\n\n    return {\n      uuidsPage: data\n        .filter(v => v[0] === 'data-audio-id')\n        .map(v => v[1]),\n      pages: data\n        .filter(v => v[0] === 'data-audioteca-search-page')\n        .map(v => Number(v[1])),\n    };\n  }\n\n  // Downloads podcast JSON\n  // (uuid) => Promise(podcastJSON)\n  getPodcastData(uuid) {\n\n    // Return cached version if we've got it\n    if(uuid in this._podcastsData) {\n      // Return podcast as an immediatelly resolved Promise,\n      // as it is what's expected\n      return new Promise( resolve => resolve(this._podcastsData[uuid]) );\n    }\n\n    return fetch(`https://api.audioteca.rac1.cat/piece/audio?id=${uuid}`)\n      .then(handleFetchErrors)\n      .then(data => data.json())\n      .then(podcast => {\n        // Add some data to the podcast\n        podcast.uuid = uuid;\n        podcast.audio.hour = podcast.audio.time.split(':')[0];\n\n        // Save to cache\n        this._podcastsData[uuid] = podcast;\n\n        return podcast;\n      })\n      .catch(catchFetchErrors)\n  }\n\n}\n\nexport default Rac1;\n","import React, { Component } from 'react';\nimport ReactAudioPlayer from 'react-audio-player';\nimport Rac1 from './rac1';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super();\n\n    // Initial state\n    this.state = {\n      podcasts: [{uuid: '...'}],\n      currentUUID: '',\n      date: new Date(), // Today\n      volume: 1,\n      completed: false,\n      waitingUpdate: false,\n      controls: [],\n    };\n\n    // Controls definitions\n    this.controls = [\n      {\n        icon: '⏮',\n        text: 'Prev',\n        action: this.playPrev,\n      },\n      {\n        icon: <span style={{ letterSpacing: -10, paddingRight: 11 }}>⯇⯇⯇</span>,\n        text: '-10m',\n        action: () => this.player().currentTime -= 600,\n      },\n      {\n        icon: <span style={{ letterSpacing: -10, paddingRight: 11 }}>⯇⯇</span>,\n        text: '-60s',\n        action: () => this.player().currentTime -= 60,\n      },\n      {\n        icon: '⯇',\n        text: '-10s',\n        action: () => this.player().currentTime -= 10,\n      },\n      {\n        icon: '▮▶',\n        text: 'Play/Pause',\n        action: () => this.player().paused ? this.player().play() : this.player().pause(),\n      },\n      {\n        icon: '⯈',\n        text: '+10s',\n        action: () => this.player().currentTime += 10,\n      },\n      {\n        icon: <span style={{ letterSpacing: -10, paddingRight: 11 }}>⯈⯈</span>,\n        text: '+60s',\n        action: () => this.player().currentTime += 60,\n      },\n      {\n        icon: <span style={{ letterSpacing: -10, paddingRight: 11 }}>⯈⯈⯈</span>,\n        text: '+10m',\n        action: () => this.player().currentTime += 600,\n      },\n      {\n        icon: '⏭',\n        text: 'Next',\n        action: this.playNext,\n      },\n    ];\n\n    // Debugging on development\n    if(process.env.NODE_ENV === \"development\") {\n\n      // Log state changes\n      this._setState = this.setState;\n      this.setState = (props) => {\n        console.log({\n          a0_prev: JSON.parse(JSON.stringify(this.state)),\n          a1_next: JSON.parse(JSON.stringify(props)),\n        });\n        this._setState(props);\n      }\n\n      // Add a button to remove the last podcast in the list\n      this.controls.push({\n          icon: 'RL',\n          text: 'Remove last',\n          action: () => this.setState({\n            ...this.state,\n            podcasts: [...this.state.podcasts.slice(0,-1)],\n          }),\n        });\n    }\n\n    // Disable key handler on mobile devices\n    if (/Mobi|Android/i.test(navigator.userAgent)) {\n      this.keyHandlerFocus = () => {};\n    }\n    else {\n      this.keyHandlerFocus = () => this._keyHandler.focus();\n    }\n  }\n\n  componentDidMount() {\n    this.keyHandlerFocus();\n    this.rac1 = new Rac1({\n      date: this.state.date,\n      onListUpdate: this.handleListUpdate.bind(this),\n    });\n    this.setState({\n      ...this.state,\n      controls: this.controls,\n    });\n  }\n\n  render() {\n    const { podcasts, volume, completed } = this.state;\n\n    // Find current podcast (selected by uuid instead of just position)\n    const current = this.findCurrentPodcast();\n    const autoplay = current > 0;\n    const currentPath =\n      podcasts !== undefined\n        && podcasts.length > current\n        && 'path' in podcasts[current]\n        ? podcasts[current].path : '';\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          { podcasts !== undefined && podcasts.length > 0 ?\n              (\n                <h3>{ 'audio' in podcasts[current] ?\n                    podcasts[current].audio.title :\n                    podcasts[current].uuid\n                }</h3>\n              ) : null\n          }\n          <input\n            name=\"player-key-handler\"\n            style={{\n              width: '0px',\n              height: '0px',\n              border: 0,\n              margin: 0,\n              padding: 0,\n              position: 'absolute'\n            }}\n            ref={(element) => { this._keyHandler = element; }}\n            onKeyUp={ this.handleKey.bind(this) }\n            onBlur={ this.keyHandlerFocus.bind(this) }\n          />\n          <div>\n            { this.state.controls.map((control, index) => {\n              return (\n                <button\n                  key={ index }\n                  onClick={ control.action.bind(this) }\n                  style={{\n                    borderRadius: \"1em\",\n                    padding: \"1em\",\n                    margin: \"1em\",\n                  }}\n                >\n                  <div style={{ fontSize: 30, fontWeight: 'bold', width: '2em' }}>\n                    { control.icon instanceof Function ? control.icon() : control.icon }\n                  </div>\n                  <span style={{ fontSize: 9, color: '#777' }}>\n                    { control.text instanceof Function ? control.text() : control.text }\n                  </span>\n                </button>\n              )\n            })}\n          </div>\n          <ReactAudioPlayer\n            ref={(element) => { this._player = element; }}\n            style={{ width: '100%' }}\n            src={ currentPath }\n            autoPlay={ autoplay }\n            controls\n            preload={ (autoplay ? \"auto\" : \"metadata\") }\n            onEnded={ this.playNext.bind(this) }\n            volume={ volume }\n          />\n          <div\n            style={{\n              color: \"#777\",\n              backgroundColor: \"white\",\n              padding: \"2em\",\n              borderRadius: \"1em\",\n              margin: \"1em\",\n              textAlign: \"left\",\n              position: \"relative\",\n            }}>\n            { podcasts.length === 1 && podcasts[0].uuid === '...' ? null :\n              <button\n                onClick={ this.handleClickReload.bind(this) }\n                disabled={ !completed }\n                style={{\n                  borderRadius: \".5em\",\n                  padding: \".25em\",\n                  margin: \"1.5em\",\n                  position: \"absolute\",\n                  top: 0,\n                  right: 0,\n                }}\n              >\n                <div style={{ fontSize: 20, fontWeight: 'bold', marginBottom: '-.5em' }}>\n                  ↺\n                </div>\n                <span style={{ fontSize: 9, color: '#777' }}>\n                  Reload\n                </span>\n              </button>\n            }\n            { podcasts !== undefined && podcasts.length > 0 ?\n              (\n                <ul style={{ listStyleType: \"none\", marginLeft: 0, paddingLeft: 0 }}>\n                  { podcasts.map((podcast, index) =>\n                    <li key={ podcast.uuid } style={{ position: \"relative\", marginLeft: \"1em\" }}>\n                      { index === current && 'path' in podcast ? (\n                        <span style={{ position: \"absolute\", left: \"-1em\" }}>⯈</span>\n                      ) : null\n                      }\n                      { !('path' in podcast) ?\n                          (\n                            <span>{ podcast.uuid }</span>\n                          ) :\n                          (\n                            <a\n                              href={ podcast.path }\n                              onClick={ this.handleClickPodcast.bind(this, index) }\n                              style={{ textDecoration: \"none\" }}\n                            >\n                              { podcast.audio.hour }h: { podcast.audio.title }\n                            </a>\n                          )\n                      }\n                    </li>\n                  )}\n                </ul>\n              ) : null\n            }\n          </div>\n        </header>\n      </div>\n    );\n  }\n\n  handleListUpdate(newList, completed) {\n    // Stop waiting if completed\n    const { waitingUpdate } = this.state;\n    const waitingUpdateNext = waitingUpdate && completed ? false : waitingUpdate;\n\n    this.setState({\n      ...this.state,\n      podcasts: newList,\n      completed,\n      waitingUpdate: waitingUpdateNext,\n    });\n\n    // Play next podcast if stop waiting, but without retrying download\n    if(waitingUpdate === true && waitingUpdateNext === false) {\n      this.playNext(false);\n    }\n  }\n\n  handleClickReload() {\n    // If there is not already an incomplete update\n    if(this.state.completed) {\n      this.setState({\n        ...this.state,\n        completed: false,\n      });\n\n      // Trigger a list update\n      return this.rac1.updateList();\n    }\n  }\n\n  findPodcastByUUID(uuid) {\n    let found = 0;\n    this.state.podcasts.forEach((podcast, index) => {\n      if(podcast.uuid === uuid) {\n        found = index\n      }\n    });\n\n    return found;\n  }\n\n  findCurrentPodcast() {\n    return this.findPodcastByUUID( this.state.currentUUID );\n  }\n\n  playPodcast(index) {\n    this.setState({\n      ...this.state,\n      currentUUID: this.state.podcasts[index].uuid,\n    });\n  }\n\n  playPrev() {\n    const current = this.findCurrentPodcast();\n    if(current > 0) {\n      this.playPodcast(current - 1);\n    }\n  }\n\n  playNext(retry=true) {\n    const current = this.findCurrentPodcast();\n\n    // If there is a next podcast and it has path, play it\n    if(current < (this.state.podcasts.length - 1) &&\n       'path' in this.state.podcasts[current]) {\n      this.playPodcast(current + 1);\n    }\n    else {\n      // If we are called to retry, update list\n      if(retry) {\n        // If we are not already waiting for update,\n        // set  and trigger a list update\n        if(!this.state.waitingUpdate) {\n          this.handleClickReload();\n          this.setState({\n            ...this.state,\n            waitingUpdate: true,\n          });\n        }\n      }\n    }\n  }\n\n  player() {\n    return this._player.audioEl;\n  }\n\n  handleClickPodcast(index, e) {\n    e.stopPropagation();\n    e.preventDefault();\n    this.playPodcast(index);\n  }\n\n  setVolume(volume) {\n    this.player().volume = volume;\n    this.setState({\n      ...this.state,\n      volume: volume,\n    });\n  }\n\n  incrementVolume(increment) {\n    const { volume } = this.state;\n    let volumeNew = volume;\n\n    // Increment\n    if(increment > 0 && volume < 1) {\n      volumeNew = volume <= (1 - increment) ? volume + increment : 1;\n    }\n\n    // Decrement\n    if(increment < 0 && volume > 0) {\n      volumeNew = volume >= (-increment) ? volume + increment : 0;\n    }\n\n    if(volumeNew !== volume) {\n      this.setVolume(volumeNew);\n    }\n  }\n\n  handleKey(e) {\n    let stopPropagation = true;\n    switch(e.key) {\n      case 'Enter':\n        this.playNext();\n        break;\n      case ' ':\n      case 'p':\n      case 'P':\n        this.player().paused ? this.player().play() : this.player().pause();\n        break;\n      case 'ArrowLeft':\n        this.player().currentTime -= 10;\n        break;\n      case 'ArrowRight':\n        this.player().currentTime += 10;\n        break;\n      case 'ArrowUp':\n        if(e.shiftKey) {\n          this.incrementVolume(.05);\n        }\n        else {\n          this.player().currentTime -= 60;\n        }\n        break;\n      case 'ArrowDown':\n        if(e.shiftKey) {\n          this.incrementVolume(-.05);\n        }\n        else {\n          this.player().currentTime += 60;\n        }\n        break;\n      case 'PageUp':\n        this.player().currentTime -= 600;\n        break;\n      case 'PageDown':\n        this.player().currentTime += 600;\n        break;\n      case '*':\n        this.incrementVolume(.05);\n        break;\n      case '/':\n        this.incrementVolume(-.05);\n        break;\n      case 'm':\n      case 'M':\n        this.player().muted = !this.player().muted;\n        break;\n      case 'r':\n      case 'R':\n        this.handleClickReload();\n        break;\n      default:\n        stopPropagation = false;\n        break;\n    }\n\n    if(stopPropagation) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}