{"version":3,"sources":["rac1.js","App.js","serviceWorker.js","index.js"],"names":["handleFetchErrors","response","ok","Error","statusText","catchFetchErrors","error","console","dataAttrsFind","dataAttrsClean","Rac1","props","Object","classCallCheck","this","_podcastsData","_pages_uuids","_previous_uuids","date","onListUpdate","updateList","pageNumber","arguments","length","undefined","pages","handleListUpdate","getPodcastsUUIDs","then","getPodcasts","bind","podcasts","_this","map","podcast","uuid","getPodcastData","handlePodcastUpdate","_this2","newList","toConsumableArray","filter","w","completed","forEach","page","pageUuids","push","podcastPage","allCompleted","every","podcastNew","_this3","index","_this4","getPage","dataRaw","_this4$parsePage","parsePage","uuidsPage","reverse","pad2","num","getDate","getMonth","getFullYear","fetch","concat","credentials","text","catch","searchData","data","split","line","test","v","replace","includes","Number","_this5","Promise","resolve","json","audio","hour","time","App","possibleConstructorReturn","getPrototypeOf","call","state","currentUUID","Date","volume","waitingUpdate","controls","icon","react_default","a","createElement","index_es","faFastForward","flip","action","playPrev","faForward","player","currentTime","style","position","left","faEject","rotation","paused","play","pause","playNext","navigator","userAgent","keyHandlerFocus","e","doFocus","relatedTarget","className","match","setTimeout","_keyHandler","focus","rac1","setState","objectSpread","_this$state","dateText","current","findCurrentPodcast","autoplay","currentPath","path","appTabletTitle","name","width","height","border","margin","padding","ref","element","onKeyUp","handleKey","onBlur","control","key","onClick","borderRadius","fontSize","fontWeight","minWidth","Function","color","bundle_default","_player","src","autoPlay","preload","onEnded","backgroundColor","textAlign","handleClickReload","disabled","top","right","marginBottom","faRefresh","entry_default","onChange","handleDateChange","handleDateBlur","minDate","maxDate","required","value","clearIcon","calendarIcon","faCalendar","listStyleType","marginLeft","paddingLeft","faPlay","href","handleClickPodcast","textDecoration","waitingUpdateNext","setDate","found","findPodcastByUUID","playPodcast","retry","audioEl","stopPropagation","preventDefault","increment","volumeNew","setVolume","shiftKey","incrementVolume","muted","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21e7922e.chunk.js","sourcesContent":["// Raises exception on response error\nfunction handleFetchErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n  return response;\n}\n\n// Catches the fetch error, original or 'self-raised'\nfunction catchFetchErrors(error) {\n  console.error(error);\n}\n\n// Cached/compiled regexps for parsing HTML\nconst dataAttrsFind   = / class=\"(audioteca-item|pagination-link)\" /;\nconst dataAttrsClean  = /.* (data-[^=]*)=\"([^\"]*)\".*/;\n\nclass Rac1 {\n\n  // Cache for UUID => podcast\n  _podcastsData = {};\n\n  // Cache for pageNumber => UUIDs\n  _pages_uuids = [];\n\n  // Cache for reloads\n  _previous_uuids = [];\n\n  constructor(props) {\n    const noop = () => {};\n    this.date = props.date;\n    this.onListUpdate = props.onListUpdate || noop;\n\n    this.updateList();\n  }\n\n  setDate(date) {\n    if(this.date !== date) {\n      this._previous_uuids = [];\n    }\n    this.date = date;\n    this.updateList();\n  }\n\n  // Download podcasts UUIDs and then, each podcast data\n  updateList(pageNumber=0) {\n    if(pageNumber === 0) {\n      this._pages_uuids = [];\n      this.pages = [0];\n      this.handleListUpdate();\n    }\n\n    // Get list of UUIDs\n    return this.getPodcastsUUIDs(pageNumber)\n      // Download podcast data if needed\n      .then(this.getPodcasts.bind(this, pageNumber))\n      // Trigger event for list updated\n      .then(this.handleListUpdate.bind(this, pageNumber));\n  }\n\n  getPodcasts(pageNumber, podcasts) {\n    return podcasts\n      .map(podcast => {\n        // If it's a podcast and is not in the cache\n        if(podcast.uuid !== '...' && !(podcast.uuid in this._podcastsData)) {\n          // Download podcast data and then trigger\n          // event when updated\n          this.getPodcastData(podcast.uuid)\n            .then( this.handlePodcastUpdate.bind(this, pageNumber) )\n        }\n        return podcast;\n      })\n  }\n\n  // Creates a list with all known podcast or UUIDs\n  // and fires event onListUpdate with that\n  // () => null\n  handleListUpdate() {\n    let newList = [...this._previous_uuids.filter(w => w.uuid !== '...')];\n    let completed = true;\n\n    // Create a virtual list of all podcasts correctly ordered\n    this.pages.forEach( page => {\n\n      // Get UUIDs from the pages cache\n      var pageUuids = this._pages_uuids[ page ];\n\n      // Set temporal UUID for unresolved pages\n      if(pageUuids === undefined) {\n        newList.push({uuid: '...'});\n        completed = false;\n      }\n      else {\n        // Add this page's podcasts to the list\n        pageUuids\n          // filter out already added podcasts\n          .filter( podcastPage => {\n            const found = newList.filter(\n              podcast => podcast.uuid === podcastPage.uuid );\n            return found.length === 0;\n          })\n          .forEach( podcast => newList.push( podcast ) );\n      }\n    });\n\n    // Get cached data if available\n    newList = newList.map(podcast => this._podcastsData[podcast.uuid] || podcast );\n\n    // Save complete list on finish\n    if(completed) {\n      this._previous_uuids = newList;\n    }\n\n    // See if all podcasts have already been downloaded\n    const allCompleted = completed && newList.every(podcast => 'path' in podcast);\n\n    // Trigger update event\n    this.onListUpdate(newList, allCompleted);\n\n    return newList;\n  }\n\n  // Saves the new podcast to the pages cache and fires onPodcastUpdate\n  // (pageNumber, podcastNew) => null\n  handlePodcastUpdate(pageNumber, podcastNew) {\n    podcastNew.page = pageNumber;\n    this._pages_uuids[pageNumber].forEach((podcast,index) => {\n      if(podcast.uuid === podcastNew.uuid) {\n        this._pages_uuids[pageNumber][index] = podcastNew;\n      }\n    });\n\n    // Trigger update event\n    this.handleListUpdate(podcastNew);\n  }\n\n  // Gets all the podcasts UUIDs of a date\n  // (pageNumber) => Promise(Array(String(UUID)))\n  getPodcastsUUIDs(pageNumber=0) {\n    return this.getPage(pageNumber)\n      .then(dataRaw => {\n\n        //console.log({pageNumber, dataRaw});\n        const { uuidsPage, pages } = this.parsePage(dataRaw);\n\n        // If it's the first page, call the rest\n        if(pageNumber === 0) {\n\n          // Save the list of pages, in reverse order\n          // If there are no pages (only one page), create a one element array,\n          // with page zero in it's first element\n          this.pages = pages.length > 0 ? pages.reverse() : [0];\n\n          // Resolve first the last page, so we have first the first day's UUIDs\n          // Don't call again first page\n          this.pages.forEach( page => (page !== 0) && this.updateList( page ) );\n        }\n\n        this._pages_uuids[pageNumber] = uuidsPage\n          .reverse()\n          .map(uuid => { return {uuid, page: pageNumber} });\n\n        return this._pages_uuids[pageNumber];\n      });\n  }\n\n  // Gets a page with HTML containning a list of podcasts from the server\n  // (pageNumber) => Promise(String)\n  getPage(pageNumber=0) {\n    // Format day and month to 2 digits 0 padded strings\n    const pad2 = num => ( num < 10 ? '0' : '' ) + num;\n    const date =\n      pad2( this.date.getDate() ) + '/' +\n      pad2( 1 + this.date.getMonth() ) + '/' +\n      this.date.getFullYear();\n\n    return fetch(\n      \"https://cors-anywhere.herokuapp.com/\" // Anti CORS\n      //+ \"https://www.rac1.cat/a-la-carta/cerca?\"\n      + \"https://api.audioteca.rac1.cat/a-la-carta/cerca?\"\n      + `text=&programId=&sectionId=HOUR&from=${date}&to=${date}&pageNumber=${pageNumber}`,\n      {\n        //mode: 'no-cors',\n        credentials: 'omit',\n      })\n      .then(handleFetchErrors)\n      .then(response => response.text())\n      .catch(catchFetchErrors)\n  }\n\n  // Parses a page raw HTML to obtain audio UUIDs and the list of pages\n  // (dataRawHTML) => {uuidsPage: Array(String), pages: Array(Number)}\n  parsePage(dataRaw) {\n    const searchData = ['data-audio-id','data-audioteca-search-page'];\n    const data = dataRaw\n      .split('\\n')\n      .filter(line => dataAttrsFind.test(line))\n      .map(v => v.replace(dataAttrsClean, '$1=$2'))\n      .map(line => line.split('='))\n      .filter(v => searchData.includes(v[0]));\n\n    return {\n      uuidsPage: data\n        .filter(v => v[0] === 'data-audio-id')\n        .map(v => v[1]),\n      pages: data\n        .filter(v => v[0] === 'data-audioteca-search-page')\n        .map(v => Number(v[1])),\n    };\n  }\n\n  // Downloads podcast JSON\n  // (uuid) => Promise(podcastJSON)\n  getPodcastData(uuid) {\n\n    // Return cached version if we've got it\n    if(uuid in this._podcastsData) {\n      // Return podcast as an immediatelly resolved Promise,\n      // as it is what's expected\n      return new Promise( resolve => resolve(this._podcastsData[uuid]) );\n    }\n\n    return fetch(`https://api.audioteca.rac1.cat/piece/audio?id=${uuid}`)\n      .then(handleFetchErrors)\n      .then(data => data.json())\n      .then(podcast => {\n        // Add some data to the podcast\n        podcast.uuid = uuid;\n        podcast.audio.hour = podcast.audio.time.split(':')[0];\n\n        // Save to cache\n        this._podcastsData[uuid] = podcast;\n\n        return podcast;\n      })\n      .catch(catchFetchErrors)\n  }\n\n}\n\nexport default Rac1;\n","import React, { Component } from 'react';\nimport ReactAudioPlayer from 'react-audio-player';\nimport DatePicker from 'react-date-picker'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faEject,\n  faPlay,\n  faForward,\n  faFastForward,\n  faSyncAlt as faRefresh,\n  faCalendarAlt as faCalendar,\n} from '@fortawesome/free-solid-svg-icons'\n\n\nimport Rac1 from './rac1';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super();\n\n    // Initial state\n    this.state = {\n      podcasts: [{uuid: '...'}],\n      currentUUID: '',\n      date: new Date(), // Today\n      volume: 1,\n      completed: false,\n      waitingUpdate: false,\n      controls: [],\n    };\n\n    // Controls definitions\n    this.controls = [\n      {\n        icon: <FontAwesomeIcon icon={faFastForward} flip=\"horizontal\" />,\n        text: 'Prev',\n        action: this.playPrev,\n      },\n      {\n        icon: (\n          <span>\n            <FontAwesomeIcon icon={faForward} flip=\"horizontal\" />\n            <FontAwesomeIcon icon={faForward} flip=\"horizontal\" />\n          </span>\n        ),\n        text: '-10m',\n        action: () => this.player().currentTime -= 600,\n      },\n      {\n        icon: (\n          <span>\n            <FontAwesomeIcon icon={faForward} flip=\"horizontal\" style={{ position: 'relative', left: '.25em' }} />\n            <FontAwesomeIcon icon={faForward} flip=\"horizontal\" style={{ position: 'relative', left: '-.25em' }} />\n          </span>\n        ),\n        text: '-60s',\n        action: () => this.player().currentTime -= 60,\n      },\n      {\n        icon: <FontAwesomeIcon icon={faForward} flip=\"horizontal\" />,\n        text: '-10s',\n        action: () => this.player().currentTime -= 10,\n      },\n      {\n        icon: <FontAwesomeIcon icon={faEject} rotation={90} />,\n        text: 'Play/Pause',\n        action: () => this.player().paused ? this.player().play() : this.player().pause(),\n      },\n      {\n        icon: <FontAwesomeIcon icon={faForward} />,\n        text: '+10s',\n        action: () => this.player().currentTime += 10,\n      },\n      {\n        icon: (\n          <span>\n            <FontAwesomeIcon icon={faForward} style={{ position: 'relative', left: '.25em' }} />\n            <FontAwesomeIcon icon={faForward} style={{ position: 'relative', left: '-.25em' }} />\n          </span>\n        ),\n        text: '+60s',\n        action: () => this.player().currentTime += 60,\n      },\n      {\n        icon: (\n          <span>\n            <FontAwesomeIcon icon={faForward} />\n            <FontAwesomeIcon icon={faForward} />\n          </span>\n        ),\n        text: '+10m',\n        action: () => this.player().currentTime += 600,\n      },\n      {\n        icon: <FontAwesomeIcon icon={faFastForward} />,\n        text: 'Next',\n        action: this.playNext,\n      },\n    ];\n\n    // Debugging on development\n    if(process.env.NODE_ENV === \"development\") {\n\n      // Log state changes\n      this._setState = this.setState;\n      this.setState = (props) => {\n        console.log({\n          a0_prev: JSON.parse(JSON.stringify(this.state)),\n          a1_next: JSON.parse(JSON.stringify(props)),\n        });\n        this._setState(props);\n      }\n\n      // Add a button to remove the last podcast in the list\n      this.controls.push({\n          icon: 'RL',\n          text: 'Remove last',\n          action: () => this.setState({\n            ...this.state,\n            podcasts: [...this.state.podcasts.slice(0,-1)],\n          }),\n        });\n    }\n\n    // Disable key handler on mobile devices\n    if (/Mobi|Android/i.test(navigator.userAgent)) {\n      this.keyHandlerFocus = () => {};\n    }\n    else {\n      this.keyHandlerFocus = (e) => {\n        let doFocus = true;\n\n        // Allow datepicker to get focus\n        if(e && e.relatedTarget &&\n          e.relatedTarget.className.match(/date-?picker/)) {\n          doFocus = false;\n        }\n\n        doFocus && setTimeout(() => this._keyHandler.focus(), 100);\n      };\n    }\n  }\n\n  componentDidMount() {\n    this.keyHandlerFocus();\n    this.rac1 = new Rac1({\n      date: this.state.date,\n      onListUpdate: this.handleListUpdate.bind(this),\n    });\n    this.setState({\n      ...this.state,\n      controls: this.controls,\n    });\n  }\n\n  render() {\n    const { podcasts, volume, completed, date } = this.state;\n    const dateText = date instanceof Date ?\n      `${date.getDate()}/${1 + date.getMonth()}/${date.getFullYear()}`\n      : '...';\n\n    // Find current podcast (selected by uuid instead of just position)\n    const current = this.findCurrentPodcast();\n    const autoplay = current > 0;\n    const currentPath =\n      podcasts !== undefined\n        && podcasts.length > current\n        && 'path' in podcasts[current]\n        ? podcasts[current].path : '';\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h3>\n          { podcasts !== undefined && podcasts.length > 0 ?\n                ( 'audio' in podcasts[current] ?\n                    `${dateText}: ${podcasts[current].appTabletTitle}` :\n                    dateText )\n              : dateText\n          }\n          </h3>\n          <input\n            name=\"player-key-handler\"\n            style={{\n              width: '0px',\n              height: '0px',\n              border: 0,\n              margin: 0,\n              padding: 0,\n              position: 'absolute'\n            }}\n            ref={(element) => { this._keyHandler = element; }}\n            onKeyUp={ this.handleKey.bind(this) }\n            onBlur={ this.keyHandlerFocus.bind(this) }\n          />\n          <div>\n            { this.state.controls.map((control, index) => {\n              return (\n                <button\n                  key={ index }\n                  onClick={ control.action.bind(this) }\n                  style={{\n                    borderRadius: \"1em\",\n                    padding: \"1em\",\n                    margin: \"1em\",\n                  }}\n                >\n                  <div style={{\n                    fontSize: 'calc(1em + 2.5vmin)',\n                    fontWeight: 'bold',\n                    minWidth: '1.5em',\n                  }} >\n                    { control.icon instanceof Function ? control.icon() : control.icon }\n                  </div>\n                  <span style={{ fontSize: 'calc(8px + 1vmin)', color: '#777' }}>\n                    { control.text instanceof Function ? control.text() : control.text }\n                  </span>\n                </button>\n              )\n            })}\n          </div>\n          <ReactAudioPlayer\n            ref={(element) => { this._player = element; }}\n            style={{ width: '100%' }}\n            src={ currentPath }\n            autoPlay={ autoplay }\n            controls\n            preload={ (autoplay ? \"auto\" : \"metadata\") }\n            onEnded={ this.playNext.bind(this) }\n            volume={ volume }\n          />\n          <div\n            style={{\n              color: \"#777\",\n              backgroundColor: \"white\",\n              padding: \"2em\",\n              borderRadius: \"1em\",\n              margin: \"1em\",\n              textAlign: \"left\",\n              position: \"relative\",\n            }}>\n            { podcasts.length === 1 && podcasts[0].uuid === '...' ? null :\n              <button\n                onClick={ this.handleClickReload.bind(this) }\n                disabled={ !completed }\n                style={{\n                  borderRadius: \".5em\",\n                  padding: \".25em\",\n                  margin: \"1.5em\",\n                  position: \"absolute\",\n                  top: 0,\n                  right: 0,\n                }}\n              >\n                <div style={{\n                  fontSize: 'calc(.5em + 2vmin)',\n                  fontWeight: 'bold',\n                  marginBottom: '-.25em'\n                }}>\n                  <FontAwesomeIcon icon={faRefresh} />\n                </div>\n                <span style={{ fontSize: 'calc(5px + 1vmin)', color: '#777' }}>\n                  Reload\n                </span>\n              </button>\n            }\n            <div style={{ textAlign: 'center', fontSize: 'large' }}>\n              <DatePicker\n                onChange={ this.handleDateChange.bind(this) }\n                onBlur={ this.handleDateBlur.bind(this) }\n                minDate={ new Date(2015, 5, 1) /* 1st date with HOUR podcasts */ }\n                maxDate={ new Date() }\n                required={ true }\n                value={ date }\n                clearIcon={ null }\n                calendarIcon={ <FontAwesomeIcon icon={faCalendar} /> }\n              />\n            </div>\n            { podcasts !== undefined && podcasts.length > 0 ?\n              (\n                <ul style={{ listStyleType: \"none\", marginLeft: 0, paddingLeft: 0 }}>\n                  { podcasts.map((podcast, index) =>\n                    <li\n                      key={ podcast.uuid !== '...' ? podcast.uuid : `..._${index}` }\n                      style={{ position: \"relative\", marginLeft: \"1em\" }}>\n                      { index === current && 'path' in podcast ? (\n                        <FontAwesomeIcon\n                          icon={faPlay}\n                          style={{\n                            position: 'absolute',\n                            left: '-1.25em',\n                            top: 'calc(.2vmin + .2em)',\n                          }}/>\n                      ) : null\n                      }\n                      { !('path' in podcast) ?\n                          (\n                            <span>{ podcast.uuid }</span>\n                          ) :\n                          (\n                            <a\n                              href={ podcast.path }\n                              onClick={ this.handleClickPodcast.bind(this, index) }\n                              style={{ textDecoration: \"none\" }}\n                            >\n                              { podcast.audio.hour }h: { podcast.appTabletTitle }\n                            </a>\n                          )\n                      }\n                    </li>\n                  )}\n                </ul>\n              ) : null\n            }\n          </div>\n        </header>\n      </div>\n    );\n  }\n\n  handleListUpdate(newList, completed) {\n    // Stop waiting if completed\n    const { waitingUpdate } = this.state;\n    const waitingUpdateNext = waitingUpdate && completed ? false : waitingUpdate;\n\n    this.setState({\n      ...this.state,\n      podcasts: newList,\n      completed,\n      waitingUpdate: waitingUpdateNext,\n    });\n\n    // Play next podcast if stop waiting, but without retrying download\n    if(waitingUpdate === true && waitingUpdateNext === false) {\n      this.playNext(false);\n    }\n  }\n\n  handleDateChange(date) {\n    if(date !== this.state.date) {\n      if(date !== null) {\n        this.rac1.setDate(date);\n      }\n      this.setState({\n        ...this.state,\n        date,\n      });\n    }\n  }\n\n  handleDateBlur(e) {\n    let focus = true;\n    if(e && e.relatedTarget &&\n      e.relatedTarget.className.match(/(calendar|date-?picker)/)) {\n      focus = false;\n    }\n\n    if(focus) {\n      this.keyHandlerFocus();\n    }\n  }\n\n  handleClickReload() {\n    // If there is not already an incomplete update\n    if(this.state.completed) {\n      this.setState({\n        ...this.state,\n        completed: false,\n      });\n\n      // Trigger a list update\n      return this.rac1.updateList();\n    }\n  }\n\n  findPodcastByUUID(uuid) {\n    let found = 0;\n    this.state.podcasts.forEach((podcast, index) => {\n      if(podcast.uuid === uuid) {\n        found = index\n      }\n    });\n\n    return found;\n  }\n\n  findCurrentPodcast() {\n    return this.findPodcastByUUID( this.state.currentUUID );\n  }\n\n  playPodcast(index) {\n    this.setState({\n      ...this.state,\n      currentUUID: this.state.podcasts[index].uuid,\n    });\n  }\n\n  playPrev() {\n    const current = this.findCurrentPodcast();\n    if(current > 0) {\n      this.playPodcast(current - 1);\n    }\n  }\n\n  playNext(retry=true) {\n    const current = this.findCurrentPodcast();\n\n    // If there is a next podcast and it has path, play it\n    if(current < (this.state.podcasts.length - 1) &&\n       'path' in this.state.podcasts[current]) {\n      this.playPodcast(current + 1);\n    }\n    else {\n      // If we are called to retry, update list\n      if(retry) {\n        // If we are not already waiting for update,\n        // set  and trigger a list update\n        if(!this.state.waitingUpdate) {\n          this.handleClickReload();\n          this.setState({\n            ...this.state,\n            waitingUpdate: true,\n          });\n        }\n      }\n    }\n  }\n\n  player() {\n    return this._player.audioEl;\n  }\n\n  handleClickPodcast(index, e) {\n    e.stopPropagation();\n    e.preventDefault();\n    this.playPodcast(index);\n  }\n\n  setVolume(volume) {\n    this.player().volume = volume;\n    this.setState({\n      ...this.state,\n      volume: volume,\n    });\n  }\n\n  incrementVolume(increment) {\n    const { volume } = this.state;\n    let volumeNew = volume;\n\n    // Increment\n    if(increment > 0 && volume < 1) {\n      volumeNew = volume <= (1 - increment) ? volume + increment : 1;\n    }\n\n    // Decrement\n    if(increment < 0 && volume > 0) {\n      volumeNew = volume >= (-increment) ? volume + increment : 0;\n    }\n\n    if(volumeNew !== volume) {\n      this.setVolume(volumeNew);\n    }\n  }\n\n  handleKey(e) {\n    let stopPropagation = true;\n    switch(e.key) {\n      case 'Enter':\n        this.playNext();\n        break;\n      case ' ':\n      case 'p':\n      case 'P':\n        this.player().paused ? this.player().play() : this.player().pause();\n        break;\n      case 'ArrowLeft':\n        this.player().currentTime -= 10;\n        break;\n      case 'ArrowRight':\n        this.player().currentTime += 10;\n        break;\n      case 'ArrowUp':\n        if(e.shiftKey) {\n          this.incrementVolume(.05);\n        }\n        else {\n          this.player().currentTime -= 60;\n        }\n        break;\n      case 'ArrowDown':\n        if(e.shiftKey) {\n          this.incrementVolume(-.05);\n        }\n        else {\n          this.player().currentTime += 60;\n        }\n        break;\n      case 'PageUp':\n        this.player().currentTime -= 600;\n        break;\n      case 'PageDown':\n        this.player().currentTime += 600;\n        break;\n      case '*':\n        this.incrementVolume(.05);\n        break;\n      case '/':\n        this.incrementVolume(-.05);\n        break;\n      case 'm':\n      case 'M':\n        this.player().muted = !this.player().muted;\n        break;\n      case 'r':\n      case 'R':\n        this.handleClickReload();\n        break;\n      default:\n        stopPropagation = false;\n        break;\n    }\n\n    if(stopPropagation) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}